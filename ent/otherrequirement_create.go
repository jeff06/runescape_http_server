// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"runescape_http_server/ent/otherrequirement"
	"runescape_http_server/ent/unlock"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OtherRequirementCreate is the builder for creating a OtherRequirement entity.
type OtherRequirementCreate struct {
	config
	mutation *OtherRequirementMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (orc *OtherRequirementCreate) SetName(s string) *OtherRequirementCreate {
	orc.mutation.SetName(s)
	return orc
}

// SetIsMember sets the "is_member" field.
func (orc *OtherRequirementCreate) SetIsMember(i int) *OtherRequirementCreate {
	orc.mutation.SetIsMember(i)
	return orc
}

// SetIsQuest sets the "is_quest" field.
func (orc *OtherRequirementCreate) SetIsQuest(i int) *OtherRequirementCreate {
	orc.mutation.SetIsQuest(i)
	return orc
}

// SetIsSkill sets the "is_skill" field.
func (orc *OtherRequirementCreate) SetIsSkill(i int) *OtherRequirementCreate {
	orc.mutation.SetIsSkill(i)
	return orc
}

// SetIDUnlock sets the "id_unlock" field.
func (orc *OtherRequirementCreate) SetIDUnlock(i int) *OtherRequirementCreate {
	orc.mutation.SetIDUnlock(i)
	return orc
}

// SetNillableIDUnlock sets the "id_unlock" field if the given value is not nil.
func (orc *OtherRequirementCreate) SetNillableIDUnlock(i *int) *OtherRequirementCreate {
	if i != nil {
		orc.SetIDUnlock(*i)
	}
	return orc
}

// SetIDOfRequirement sets the "id_of_requirement" field.
func (orc *OtherRequirementCreate) SetIDOfRequirement(i int) *OtherRequirementCreate {
	orc.mutation.SetIDOfRequirement(i)
	return orc
}

// SetOtherRequirementIDUnlockFkID sets the "other_requirement_id_unlock_fk" edge to the Unlock entity by ID.
func (orc *OtherRequirementCreate) SetOtherRequirementIDUnlockFkID(id int) *OtherRequirementCreate {
	orc.mutation.SetOtherRequirementIDUnlockFkID(id)
	return orc
}

// SetNillableOtherRequirementIDUnlockFkID sets the "other_requirement_id_unlock_fk" edge to the Unlock entity by ID if the given value is not nil.
func (orc *OtherRequirementCreate) SetNillableOtherRequirementIDUnlockFkID(id *int) *OtherRequirementCreate {
	if id != nil {
		orc = orc.SetOtherRequirementIDUnlockFkID(*id)
	}
	return orc
}

// SetOtherRequirementIDUnlockFk sets the "other_requirement_id_unlock_fk" edge to the Unlock entity.
func (orc *OtherRequirementCreate) SetOtherRequirementIDUnlockFk(u *Unlock) *OtherRequirementCreate {
	return orc.SetOtherRequirementIDUnlockFkID(u.ID)
}

// Mutation returns the OtherRequirementMutation object of the builder.
func (orc *OtherRequirementCreate) Mutation() *OtherRequirementMutation {
	return orc.mutation
}

// Save creates the OtherRequirement in the database.
func (orc *OtherRequirementCreate) Save(ctx context.Context) (*OtherRequirement, error) {
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OtherRequirementCreate) SaveX(ctx context.Context) *OtherRequirement {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OtherRequirementCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OtherRequirementCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (orc *OtherRequirementCreate) check() error {
	if _, ok := orc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OtherRequirement.name"`)}
	}
	if _, ok := orc.mutation.IsMember(); !ok {
		return &ValidationError{Name: "is_member", err: errors.New(`ent: missing required field "OtherRequirement.is_member"`)}
	}
	if _, ok := orc.mutation.IsQuest(); !ok {
		return &ValidationError{Name: "is_quest", err: errors.New(`ent: missing required field "OtherRequirement.is_quest"`)}
	}
	if _, ok := orc.mutation.IsSkill(); !ok {
		return &ValidationError{Name: "is_skill", err: errors.New(`ent: missing required field "OtherRequirement.is_skill"`)}
	}
	if _, ok := orc.mutation.IDOfRequirement(); !ok {
		return &ValidationError{Name: "id_of_requirement", err: errors.New(`ent: missing required field "OtherRequirement.id_of_requirement"`)}
	}
	return nil
}

func (orc *OtherRequirementCreate) sqlSave(ctx context.Context) (*OtherRequirement, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OtherRequirementCreate) createSpec() (*OtherRequirement, *sqlgraph.CreateSpec) {
	var (
		_node = &OtherRequirement{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(otherrequirement.Table, sqlgraph.NewFieldSpec(otherrequirement.FieldID, field.TypeInt))
	)
	if value, ok := orc.mutation.Name(); ok {
		_spec.SetField(otherrequirement.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := orc.mutation.IsMember(); ok {
		_spec.SetField(otherrequirement.FieldIsMember, field.TypeInt, value)
		_node.IsMember = value
	}
	if value, ok := orc.mutation.IsQuest(); ok {
		_spec.SetField(otherrequirement.FieldIsQuest, field.TypeInt, value)
		_node.IsQuest = value
	}
	if value, ok := orc.mutation.IsSkill(); ok {
		_spec.SetField(otherrequirement.FieldIsSkill, field.TypeInt, value)
		_node.IsSkill = value
	}
	if value, ok := orc.mutation.IDOfRequirement(); ok {
		_spec.SetField(otherrequirement.FieldIDOfRequirement, field.TypeInt, value)
		_node.IDOfRequirement = value
	}
	if nodes := orc.mutation.OtherRequirementIDUnlockFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otherrequirement.OtherRequirementIDUnlockFkTable,
			Columns: []string{otherrequirement.OtherRequirementIDUnlockFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IDUnlock = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OtherRequirementCreateBulk is the builder for creating many OtherRequirement entities in bulk.
type OtherRequirementCreateBulk struct {
	config
	err      error
	builders []*OtherRequirementCreate
}

// Save creates the OtherRequirement entities in the database.
func (orcb *OtherRequirementCreateBulk) Save(ctx context.Context) ([]*OtherRequirement, error) {
	if orcb.err != nil {
		return nil, orcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OtherRequirement, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OtherRequirementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OtherRequirementCreateBulk) SaveX(ctx context.Context) []*OtherRequirement {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OtherRequirementCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OtherRequirementCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}
