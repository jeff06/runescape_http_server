// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"runescape_http_server/ent/skill"
	"runescape_http_server/ent/unlock"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnlockCreate is the builder for creating a Unlock entity.
type UnlockCreate struct {
	config
	mutation *UnlockMutation
	hooks    []Hook
}

// SetIDSkill sets the "id_skill" field.
func (uc *UnlockCreate) SetIDSkill(i int) *UnlockCreate {
	uc.mutation.SetIDSkill(i)
	return uc
}

// SetNillableIDSkill sets the "id_skill" field if the given value is not nil.
func (uc *UnlockCreate) SetNillableIDSkill(i *int) *UnlockCreate {
	if i != nil {
		uc.SetIDSkill(*i)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UnlockCreate) SetName(s string) *UnlockCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetDescription sets the "description" field.
func (uc *UnlockCreate) SetDescription(s string) *UnlockCreate {
	uc.mutation.SetDescription(s)
	return uc
}

// SetOtherRequirement sets the "other_requirement" field.
func (uc *UnlockCreate) SetOtherRequirement(s string) *UnlockCreate {
	uc.mutation.SetOtherRequirement(s)
	return uc
}

// SetLevel sets the "level" field.
func (uc *UnlockCreate) SetLevel(i int) *UnlockCreate {
	uc.mutation.SetLevel(i)
	return uc
}

// SetUnlockIDSkillFkID sets the "unlock_id_skill_fk" edge to the Skill entity by ID.
func (uc *UnlockCreate) SetUnlockIDSkillFkID(id int) *UnlockCreate {
	uc.mutation.SetUnlockIDSkillFkID(id)
	return uc
}

// SetNillableUnlockIDSkillFkID sets the "unlock_id_skill_fk" edge to the Skill entity by ID if the given value is not nil.
func (uc *UnlockCreate) SetNillableUnlockIDSkillFkID(id *int) *UnlockCreate {
	if id != nil {
		uc = uc.SetUnlockIDSkillFkID(*id)
	}
	return uc
}

// SetUnlockIDSkillFk sets the "unlock_id_skill_fk" edge to the Skill entity.
func (uc *UnlockCreate) SetUnlockIDSkillFk(s *Skill) *UnlockCreate {
	return uc.SetUnlockIDSkillFkID(s.ID)
}

// Mutation returns the UnlockMutation object of the builder.
func (uc *UnlockCreate) Mutation() *UnlockMutation {
	return uc.mutation
}

// Save creates the Unlock in the database.
func (uc *UnlockCreate) Save(ctx context.Context) (*Unlock, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UnlockCreate) SaveX(ctx context.Context) *Unlock {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UnlockCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UnlockCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UnlockCreate) check() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Unlock.name"`)}
	}
	if _, ok := uc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Unlock.description"`)}
	}
	if _, ok := uc.mutation.OtherRequirement(); !ok {
		return &ValidationError{Name: "other_requirement", err: errors.New(`ent: missing required field "Unlock.other_requirement"`)}
	}
	if _, ok := uc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Unlock.level"`)}
	}
	return nil
}

func (uc *UnlockCreate) sqlSave(ctx context.Context) (*Unlock, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UnlockCreate) createSpec() (*Unlock, *sqlgraph.CreateSpec) {
	var (
		_node = &Unlock{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(unlock.Table, sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(unlock.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Description(); ok {
		_spec.SetField(unlock.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := uc.mutation.OtherRequirement(); ok {
		_spec.SetField(unlock.FieldOtherRequirement, field.TypeString, value)
		_node.OtherRequirement = value
	}
	if value, ok := uc.mutation.Level(); ok {
		_spec.SetField(unlock.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if nodes := uc.mutation.UnlockIDSkillFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unlock.UnlockIDSkillFkTable,
			Columns: []string{unlock.UnlockIDSkillFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IDSkill = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UnlockCreateBulk is the builder for creating many Unlock entities in bulk.
type UnlockCreateBulk struct {
	config
	err      error
	builders []*UnlockCreate
}

// Save creates the Unlock entities in the database.
func (ucb *UnlockCreateBulk) Save(ctx context.Context) ([]*Unlock, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Unlock, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UnlockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UnlockCreateBulk) SaveX(ctx context.Context) []*Unlock {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UnlockCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UnlockCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
