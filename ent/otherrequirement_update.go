// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"runescape_http_server/ent/otherrequirement"
	"runescape_http_server/ent/predicate"
	"runescape_http_server/ent/unlock"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OtherRequirementUpdate is the builder for updating OtherRequirement entities.
type OtherRequirementUpdate struct {
	config
	hooks    []Hook
	mutation *OtherRequirementMutation
}

// Where appends a list predicates to the OtherRequirementUpdate builder.
func (oru *OtherRequirementUpdate) Where(ps ...predicate.OtherRequirement) *OtherRequirementUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetName sets the "name" field.
func (oru *OtherRequirementUpdate) SetName(s string) *OtherRequirementUpdate {
	oru.mutation.SetName(s)
	return oru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oru *OtherRequirementUpdate) SetNillableName(s *string) *OtherRequirementUpdate {
	if s != nil {
		oru.SetName(*s)
	}
	return oru
}

// SetIsMember sets the "is_member" field.
func (oru *OtherRequirementUpdate) SetIsMember(i int) *OtherRequirementUpdate {
	oru.mutation.ResetIsMember()
	oru.mutation.SetIsMember(i)
	return oru
}

// SetNillableIsMember sets the "is_member" field if the given value is not nil.
func (oru *OtherRequirementUpdate) SetNillableIsMember(i *int) *OtherRequirementUpdate {
	if i != nil {
		oru.SetIsMember(*i)
	}
	return oru
}

// AddIsMember adds i to the "is_member" field.
func (oru *OtherRequirementUpdate) AddIsMember(i int) *OtherRequirementUpdate {
	oru.mutation.AddIsMember(i)
	return oru
}

// SetIsQuest sets the "is_quest" field.
func (oru *OtherRequirementUpdate) SetIsQuest(i int) *OtherRequirementUpdate {
	oru.mutation.ResetIsQuest()
	oru.mutation.SetIsQuest(i)
	return oru
}

// SetNillableIsQuest sets the "is_quest" field if the given value is not nil.
func (oru *OtherRequirementUpdate) SetNillableIsQuest(i *int) *OtherRequirementUpdate {
	if i != nil {
		oru.SetIsQuest(*i)
	}
	return oru
}

// AddIsQuest adds i to the "is_quest" field.
func (oru *OtherRequirementUpdate) AddIsQuest(i int) *OtherRequirementUpdate {
	oru.mutation.AddIsQuest(i)
	return oru
}

// SetIsSkill sets the "is_skill" field.
func (oru *OtherRequirementUpdate) SetIsSkill(i int) *OtherRequirementUpdate {
	oru.mutation.ResetIsSkill()
	oru.mutation.SetIsSkill(i)
	return oru
}

// SetNillableIsSkill sets the "is_skill" field if the given value is not nil.
func (oru *OtherRequirementUpdate) SetNillableIsSkill(i *int) *OtherRequirementUpdate {
	if i != nil {
		oru.SetIsSkill(*i)
	}
	return oru
}

// AddIsSkill adds i to the "is_skill" field.
func (oru *OtherRequirementUpdate) AddIsSkill(i int) *OtherRequirementUpdate {
	oru.mutation.AddIsSkill(i)
	return oru
}

// SetIDUnlock sets the "id_unlock" field.
func (oru *OtherRequirementUpdate) SetIDUnlock(i int) *OtherRequirementUpdate {
	oru.mutation.SetIDUnlock(i)
	return oru
}

// SetNillableIDUnlock sets the "id_unlock" field if the given value is not nil.
func (oru *OtherRequirementUpdate) SetNillableIDUnlock(i *int) *OtherRequirementUpdate {
	if i != nil {
		oru.SetIDUnlock(*i)
	}
	return oru
}

// ClearIDUnlock clears the value of the "id_unlock" field.
func (oru *OtherRequirementUpdate) ClearIDUnlock() *OtherRequirementUpdate {
	oru.mutation.ClearIDUnlock()
	return oru
}

// SetIDOfRequirement sets the "id_of_requirement" field.
func (oru *OtherRequirementUpdate) SetIDOfRequirement(i int) *OtherRequirementUpdate {
	oru.mutation.ResetIDOfRequirement()
	oru.mutation.SetIDOfRequirement(i)
	return oru
}

// SetNillableIDOfRequirement sets the "id_of_requirement" field if the given value is not nil.
func (oru *OtherRequirementUpdate) SetNillableIDOfRequirement(i *int) *OtherRequirementUpdate {
	if i != nil {
		oru.SetIDOfRequirement(*i)
	}
	return oru
}

// AddIDOfRequirement adds i to the "id_of_requirement" field.
func (oru *OtherRequirementUpdate) AddIDOfRequirement(i int) *OtherRequirementUpdate {
	oru.mutation.AddIDOfRequirement(i)
	return oru
}

// SetOtherRequirementIDUnlockFkID sets the "other_requirement_id_unlock_fk" edge to the Unlock entity by ID.
func (oru *OtherRequirementUpdate) SetOtherRequirementIDUnlockFkID(id int) *OtherRequirementUpdate {
	oru.mutation.SetOtherRequirementIDUnlockFkID(id)
	return oru
}

// SetNillableOtherRequirementIDUnlockFkID sets the "other_requirement_id_unlock_fk" edge to the Unlock entity by ID if the given value is not nil.
func (oru *OtherRequirementUpdate) SetNillableOtherRequirementIDUnlockFkID(id *int) *OtherRequirementUpdate {
	if id != nil {
		oru = oru.SetOtherRequirementIDUnlockFkID(*id)
	}
	return oru
}

// SetOtherRequirementIDUnlockFk sets the "other_requirement_id_unlock_fk" edge to the Unlock entity.
func (oru *OtherRequirementUpdate) SetOtherRequirementIDUnlockFk(u *Unlock) *OtherRequirementUpdate {
	return oru.SetOtherRequirementIDUnlockFkID(u.ID)
}

// Mutation returns the OtherRequirementMutation object of the builder.
func (oru *OtherRequirementUpdate) Mutation() *OtherRequirementMutation {
	return oru.mutation
}

// ClearOtherRequirementIDUnlockFk clears the "other_requirement_id_unlock_fk" edge to the Unlock entity.
func (oru *OtherRequirementUpdate) ClearOtherRequirementIDUnlockFk() *OtherRequirementUpdate {
	oru.mutation.ClearOtherRequirementIDUnlockFk()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OtherRequirementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OtherRequirementUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OtherRequirementUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OtherRequirementUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oru *OtherRequirementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(otherrequirement.Table, otherrequirement.Columns, sqlgraph.NewFieldSpec(otherrequirement.FieldID, field.TypeInt))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.Name(); ok {
		_spec.SetField(otherrequirement.FieldName, field.TypeString, value)
	}
	if value, ok := oru.mutation.IsMember(); ok {
		_spec.SetField(otherrequirement.FieldIsMember, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedIsMember(); ok {
		_spec.AddField(otherrequirement.FieldIsMember, field.TypeInt, value)
	}
	if value, ok := oru.mutation.IsQuest(); ok {
		_spec.SetField(otherrequirement.FieldIsQuest, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedIsQuest(); ok {
		_spec.AddField(otherrequirement.FieldIsQuest, field.TypeInt, value)
	}
	if value, ok := oru.mutation.IsSkill(); ok {
		_spec.SetField(otherrequirement.FieldIsSkill, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedIsSkill(); ok {
		_spec.AddField(otherrequirement.FieldIsSkill, field.TypeInt, value)
	}
	if value, ok := oru.mutation.IDOfRequirement(); ok {
		_spec.SetField(otherrequirement.FieldIDOfRequirement, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedIDOfRequirement(); ok {
		_spec.AddField(otherrequirement.FieldIDOfRequirement, field.TypeInt, value)
	}
	if oru.mutation.OtherRequirementIDUnlockFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otherrequirement.OtherRequirementIDUnlockFkTable,
			Columns: []string{otherrequirement.OtherRequirementIDUnlockFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OtherRequirementIDUnlockFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otherrequirement.OtherRequirementIDUnlockFkTable,
			Columns: []string{otherrequirement.OtherRequirementIDUnlockFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otherrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OtherRequirementUpdateOne is the builder for updating a single OtherRequirement entity.
type OtherRequirementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OtherRequirementMutation
}

// SetName sets the "name" field.
func (oruo *OtherRequirementUpdateOne) SetName(s string) *OtherRequirementUpdateOne {
	oruo.mutation.SetName(s)
	return oruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oruo *OtherRequirementUpdateOne) SetNillableName(s *string) *OtherRequirementUpdateOne {
	if s != nil {
		oruo.SetName(*s)
	}
	return oruo
}

// SetIsMember sets the "is_member" field.
func (oruo *OtherRequirementUpdateOne) SetIsMember(i int) *OtherRequirementUpdateOne {
	oruo.mutation.ResetIsMember()
	oruo.mutation.SetIsMember(i)
	return oruo
}

// SetNillableIsMember sets the "is_member" field if the given value is not nil.
func (oruo *OtherRequirementUpdateOne) SetNillableIsMember(i *int) *OtherRequirementUpdateOne {
	if i != nil {
		oruo.SetIsMember(*i)
	}
	return oruo
}

// AddIsMember adds i to the "is_member" field.
func (oruo *OtherRequirementUpdateOne) AddIsMember(i int) *OtherRequirementUpdateOne {
	oruo.mutation.AddIsMember(i)
	return oruo
}

// SetIsQuest sets the "is_quest" field.
func (oruo *OtherRequirementUpdateOne) SetIsQuest(i int) *OtherRequirementUpdateOne {
	oruo.mutation.ResetIsQuest()
	oruo.mutation.SetIsQuest(i)
	return oruo
}

// SetNillableIsQuest sets the "is_quest" field if the given value is not nil.
func (oruo *OtherRequirementUpdateOne) SetNillableIsQuest(i *int) *OtherRequirementUpdateOne {
	if i != nil {
		oruo.SetIsQuest(*i)
	}
	return oruo
}

// AddIsQuest adds i to the "is_quest" field.
func (oruo *OtherRequirementUpdateOne) AddIsQuest(i int) *OtherRequirementUpdateOne {
	oruo.mutation.AddIsQuest(i)
	return oruo
}

// SetIsSkill sets the "is_skill" field.
func (oruo *OtherRequirementUpdateOne) SetIsSkill(i int) *OtherRequirementUpdateOne {
	oruo.mutation.ResetIsSkill()
	oruo.mutation.SetIsSkill(i)
	return oruo
}

// SetNillableIsSkill sets the "is_skill" field if the given value is not nil.
func (oruo *OtherRequirementUpdateOne) SetNillableIsSkill(i *int) *OtherRequirementUpdateOne {
	if i != nil {
		oruo.SetIsSkill(*i)
	}
	return oruo
}

// AddIsSkill adds i to the "is_skill" field.
func (oruo *OtherRequirementUpdateOne) AddIsSkill(i int) *OtherRequirementUpdateOne {
	oruo.mutation.AddIsSkill(i)
	return oruo
}

// SetIDUnlock sets the "id_unlock" field.
func (oruo *OtherRequirementUpdateOne) SetIDUnlock(i int) *OtherRequirementUpdateOne {
	oruo.mutation.SetIDUnlock(i)
	return oruo
}

// SetNillableIDUnlock sets the "id_unlock" field if the given value is not nil.
func (oruo *OtherRequirementUpdateOne) SetNillableIDUnlock(i *int) *OtherRequirementUpdateOne {
	if i != nil {
		oruo.SetIDUnlock(*i)
	}
	return oruo
}

// ClearIDUnlock clears the value of the "id_unlock" field.
func (oruo *OtherRequirementUpdateOne) ClearIDUnlock() *OtherRequirementUpdateOne {
	oruo.mutation.ClearIDUnlock()
	return oruo
}

// SetIDOfRequirement sets the "id_of_requirement" field.
func (oruo *OtherRequirementUpdateOne) SetIDOfRequirement(i int) *OtherRequirementUpdateOne {
	oruo.mutation.ResetIDOfRequirement()
	oruo.mutation.SetIDOfRequirement(i)
	return oruo
}

// SetNillableIDOfRequirement sets the "id_of_requirement" field if the given value is not nil.
func (oruo *OtherRequirementUpdateOne) SetNillableIDOfRequirement(i *int) *OtherRequirementUpdateOne {
	if i != nil {
		oruo.SetIDOfRequirement(*i)
	}
	return oruo
}

// AddIDOfRequirement adds i to the "id_of_requirement" field.
func (oruo *OtherRequirementUpdateOne) AddIDOfRequirement(i int) *OtherRequirementUpdateOne {
	oruo.mutation.AddIDOfRequirement(i)
	return oruo
}

// SetOtherRequirementIDUnlockFkID sets the "other_requirement_id_unlock_fk" edge to the Unlock entity by ID.
func (oruo *OtherRequirementUpdateOne) SetOtherRequirementIDUnlockFkID(id int) *OtherRequirementUpdateOne {
	oruo.mutation.SetOtherRequirementIDUnlockFkID(id)
	return oruo
}

// SetNillableOtherRequirementIDUnlockFkID sets the "other_requirement_id_unlock_fk" edge to the Unlock entity by ID if the given value is not nil.
func (oruo *OtherRequirementUpdateOne) SetNillableOtherRequirementIDUnlockFkID(id *int) *OtherRequirementUpdateOne {
	if id != nil {
		oruo = oruo.SetOtherRequirementIDUnlockFkID(*id)
	}
	return oruo
}

// SetOtherRequirementIDUnlockFk sets the "other_requirement_id_unlock_fk" edge to the Unlock entity.
func (oruo *OtherRequirementUpdateOne) SetOtherRequirementIDUnlockFk(u *Unlock) *OtherRequirementUpdateOne {
	return oruo.SetOtherRequirementIDUnlockFkID(u.ID)
}

// Mutation returns the OtherRequirementMutation object of the builder.
func (oruo *OtherRequirementUpdateOne) Mutation() *OtherRequirementMutation {
	return oruo.mutation
}

// ClearOtherRequirementIDUnlockFk clears the "other_requirement_id_unlock_fk" edge to the Unlock entity.
func (oruo *OtherRequirementUpdateOne) ClearOtherRequirementIDUnlockFk() *OtherRequirementUpdateOne {
	oruo.mutation.ClearOtherRequirementIDUnlockFk()
	return oruo
}

// Where appends a list predicates to the OtherRequirementUpdate builder.
func (oruo *OtherRequirementUpdateOne) Where(ps ...predicate.OtherRequirement) *OtherRequirementUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OtherRequirementUpdateOne) Select(field string, fields ...string) *OtherRequirementUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OtherRequirement entity.
func (oruo *OtherRequirementUpdateOne) Save(ctx context.Context) (*OtherRequirement, error) {
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OtherRequirementUpdateOne) SaveX(ctx context.Context) *OtherRequirement {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OtherRequirementUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OtherRequirementUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oruo *OtherRequirementUpdateOne) sqlSave(ctx context.Context) (_node *OtherRequirement, err error) {
	_spec := sqlgraph.NewUpdateSpec(otherrequirement.Table, otherrequirement.Columns, sqlgraph.NewFieldSpec(otherrequirement.FieldID, field.TypeInt))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OtherRequirement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, otherrequirement.FieldID)
		for _, f := range fields {
			if !otherrequirement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != otherrequirement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.Name(); ok {
		_spec.SetField(otherrequirement.FieldName, field.TypeString, value)
	}
	if value, ok := oruo.mutation.IsMember(); ok {
		_spec.SetField(otherrequirement.FieldIsMember, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedIsMember(); ok {
		_spec.AddField(otherrequirement.FieldIsMember, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.IsQuest(); ok {
		_spec.SetField(otherrequirement.FieldIsQuest, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedIsQuest(); ok {
		_spec.AddField(otherrequirement.FieldIsQuest, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.IsSkill(); ok {
		_spec.SetField(otherrequirement.FieldIsSkill, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedIsSkill(); ok {
		_spec.AddField(otherrequirement.FieldIsSkill, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.IDOfRequirement(); ok {
		_spec.SetField(otherrequirement.FieldIDOfRequirement, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedIDOfRequirement(); ok {
		_spec.AddField(otherrequirement.FieldIDOfRequirement, field.TypeInt, value)
	}
	if oruo.mutation.OtherRequirementIDUnlockFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otherrequirement.OtherRequirementIDUnlockFkTable,
			Columns: []string{otherrequirement.OtherRequirementIDUnlockFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OtherRequirementIDUnlockFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otherrequirement.OtherRequirementIDUnlockFkTable,
			Columns: []string{otherrequirement.OtherRequirementIDUnlockFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OtherRequirement{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otherrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
