// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"runescape_http_server/ent/otherrequirement"
	"runescape_http_server/ent/predicate"
	"runescape_http_server/ent/skill"
	"runescape_http_server/ent/unlock"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOtherRequirement = "OtherRequirement"
	TypeSkill            = "Skill"
	TypeUnlock           = "Unlock"
)

// OtherRequirementMutation represents an operation that mutates the OtherRequirement nodes in the graph.
type OtherRequirementMutation struct {
	config
	op                                    Op
	typ                                   string
	id                                    *int
	name                                  *string
	is_member                             *int
	addis_member                          *int
	is_quest                              *int
	addis_quest                           *int
	is_skill                              *int
	addis_skill                           *int
	id_of_requirement                     *int
	addid_of_requirement                  *int
	clearedFields                         map[string]struct{}
	other_requirement_id_unlock_fk        *int
	clearedother_requirement_id_unlock_fk bool
	done                                  bool
	oldValue                              func(context.Context) (*OtherRequirement, error)
	predicates                            []predicate.OtherRequirement
}

var _ ent.Mutation = (*OtherRequirementMutation)(nil)

// otherrequirementOption allows management of the mutation configuration using functional options.
type otherrequirementOption func(*OtherRequirementMutation)

// newOtherRequirementMutation creates new mutation for the OtherRequirement entity.
func newOtherRequirementMutation(c config, op Op, opts ...otherrequirementOption) *OtherRequirementMutation {
	m := &OtherRequirementMutation{
		config:        c,
		op:            op,
		typ:           TypeOtherRequirement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOtherRequirementID sets the ID field of the mutation.
func withOtherRequirementID(id int) otherrequirementOption {
	return func(m *OtherRequirementMutation) {
		var (
			err   error
			once  sync.Once
			value *OtherRequirement
		)
		m.oldValue = func(ctx context.Context) (*OtherRequirement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OtherRequirement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOtherRequirement sets the old OtherRequirement of the mutation.
func withOtherRequirement(node *OtherRequirement) otherrequirementOption {
	return func(m *OtherRequirementMutation) {
		m.oldValue = func(context.Context) (*OtherRequirement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OtherRequirementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OtherRequirementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OtherRequirementMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OtherRequirementMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OtherRequirement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OtherRequirementMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OtherRequirementMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OtherRequirement entity.
// If the OtherRequirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtherRequirementMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OtherRequirementMutation) ResetName() {
	m.name = nil
}

// SetIsMember sets the "is_member" field.
func (m *OtherRequirementMutation) SetIsMember(i int) {
	m.is_member = &i
	m.addis_member = nil
}

// IsMember returns the value of the "is_member" field in the mutation.
func (m *OtherRequirementMutation) IsMember() (r int, exists bool) {
	v := m.is_member
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMember returns the old "is_member" field's value of the OtherRequirement entity.
// If the OtherRequirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtherRequirementMutation) OldIsMember(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMember is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMember requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMember: %w", err)
	}
	return oldValue.IsMember, nil
}

// AddIsMember adds i to the "is_member" field.
func (m *OtherRequirementMutation) AddIsMember(i int) {
	if m.addis_member != nil {
		*m.addis_member += i
	} else {
		m.addis_member = &i
	}
}

// AddedIsMember returns the value that was added to the "is_member" field in this mutation.
func (m *OtherRequirementMutation) AddedIsMember() (r int, exists bool) {
	v := m.addis_member
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsMember resets all changes to the "is_member" field.
func (m *OtherRequirementMutation) ResetIsMember() {
	m.is_member = nil
	m.addis_member = nil
}

// SetIsQuest sets the "is_quest" field.
func (m *OtherRequirementMutation) SetIsQuest(i int) {
	m.is_quest = &i
	m.addis_quest = nil
}

// IsQuest returns the value of the "is_quest" field in the mutation.
func (m *OtherRequirementMutation) IsQuest() (r int, exists bool) {
	v := m.is_quest
	if v == nil {
		return
	}
	return *v, true
}

// OldIsQuest returns the old "is_quest" field's value of the OtherRequirement entity.
// If the OtherRequirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtherRequirementMutation) OldIsQuest(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsQuest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsQuest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsQuest: %w", err)
	}
	return oldValue.IsQuest, nil
}

// AddIsQuest adds i to the "is_quest" field.
func (m *OtherRequirementMutation) AddIsQuest(i int) {
	if m.addis_quest != nil {
		*m.addis_quest += i
	} else {
		m.addis_quest = &i
	}
}

// AddedIsQuest returns the value that was added to the "is_quest" field in this mutation.
func (m *OtherRequirementMutation) AddedIsQuest() (r int, exists bool) {
	v := m.addis_quest
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsQuest resets all changes to the "is_quest" field.
func (m *OtherRequirementMutation) ResetIsQuest() {
	m.is_quest = nil
	m.addis_quest = nil
}

// SetIsSkill sets the "is_skill" field.
func (m *OtherRequirementMutation) SetIsSkill(i int) {
	m.is_skill = &i
	m.addis_skill = nil
}

// IsSkill returns the value of the "is_skill" field in the mutation.
func (m *OtherRequirementMutation) IsSkill() (r int, exists bool) {
	v := m.is_skill
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSkill returns the old "is_skill" field's value of the OtherRequirement entity.
// If the OtherRequirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtherRequirementMutation) OldIsSkill(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSkill is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSkill requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSkill: %w", err)
	}
	return oldValue.IsSkill, nil
}

// AddIsSkill adds i to the "is_skill" field.
func (m *OtherRequirementMutation) AddIsSkill(i int) {
	if m.addis_skill != nil {
		*m.addis_skill += i
	} else {
		m.addis_skill = &i
	}
}

// AddedIsSkill returns the value that was added to the "is_skill" field in this mutation.
func (m *OtherRequirementMutation) AddedIsSkill() (r int, exists bool) {
	v := m.addis_skill
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsSkill resets all changes to the "is_skill" field.
func (m *OtherRequirementMutation) ResetIsSkill() {
	m.is_skill = nil
	m.addis_skill = nil
}

// SetIDUnlock sets the "id_unlock" field.
func (m *OtherRequirementMutation) SetIDUnlock(i int) {
	m.other_requirement_id_unlock_fk = &i
}

// IDUnlock returns the value of the "id_unlock" field in the mutation.
func (m *OtherRequirementMutation) IDUnlock() (r int, exists bool) {
	v := m.other_requirement_id_unlock_fk
	if v == nil {
		return
	}
	return *v, true
}

// OldIDUnlock returns the old "id_unlock" field's value of the OtherRequirement entity.
// If the OtherRequirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtherRequirementMutation) OldIDUnlock(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDUnlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDUnlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDUnlock: %w", err)
	}
	return oldValue.IDUnlock, nil
}

// ClearIDUnlock clears the value of the "id_unlock" field.
func (m *OtherRequirementMutation) ClearIDUnlock() {
	m.other_requirement_id_unlock_fk = nil
	m.clearedFields[otherrequirement.FieldIDUnlock] = struct{}{}
}

// IDUnlockCleared returns if the "id_unlock" field was cleared in this mutation.
func (m *OtherRequirementMutation) IDUnlockCleared() bool {
	_, ok := m.clearedFields[otherrequirement.FieldIDUnlock]
	return ok
}

// ResetIDUnlock resets all changes to the "id_unlock" field.
func (m *OtherRequirementMutation) ResetIDUnlock() {
	m.other_requirement_id_unlock_fk = nil
	delete(m.clearedFields, otherrequirement.FieldIDUnlock)
}

// SetIDOfRequirement sets the "id_of_requirement" field.
func (m *OtherRequirementMutation) SetIDOfRequirement(i int) {
	m.id_of_requirement = &i
	m.addid_of_requirement = nil
}

// IDOfRequirement returns the value of the "id_of_requirement" field in the mutation.
func (m *OtherRequirementMutation) IDOfRequirement() (r int, exists bool) {
	v := m.id_of_requirement
	if v == nil {
		return
	}
	return *v, true
}

// OldIDOfRequirement returns the old "id_of_requirement" field's value of the OtherRequirement entity.
// If the OtherRequirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtherRequirementMutation) OldIDOfRequirement(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDOfRequirement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDOfRequirement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDOfRequirement: %w", err)
	}
	return oldValue.IDOfRequirement, nil
}

// AddIDOfRequirement adds i to the "id_of_requirement" field.
func (m *OtherRequirementMutation) AddIDOfRequirement(i int) {
	if m.addid_of_requirement != nil {
		*m.addid_of_requirement += i
	} else {
		m.addid_of_requirement = &i
	}
}

// AddedIDOfRequirement returns the value that was added to the "id_of_requirement" field in this mutation.
func (m *OtherRequirementMutation) AddedIDOfRequirement() (r int, exists bool) {
	v := m.addid_of_requirement
	if v == nil {
		return
	}
	return *v, true
}

// ResetIDOfRequirement resets all changes to the "id_of_requirement" field.
func (m *OtherRequirementMutation) ResetIDOfRequirement() {
	m.id_of_requirement = nil
	m.addid_of_requirement = nil
}

// SetOtherRequirementIDUnlockFkID sets the "other_requirement_id_unlock_fk" edge to the Unlock entity by id.
func (m *OtherRequirementMutation) SetOtherRequirementIDUnlockFkID(id int) {
	m.other_requirement_id_unlock_fk = &id
}

// ClearOtherRequirementIDUnlockFk clears the "other_requirement_id_unlock_fk" edge to the Unlock entity.
func (m *OtherRequirementMutation) ClearOtherRequirementIDUnlockFk() {
	m.clearedother_requirement_id_unlock_fk = true
	m.clearedFields[otherrequirement.FieldIDUnlock] = struct{}{}
}

// OtherRequirementIDUnlockFkCleared reports if the "other_requirement_id_unlock_fk" edge to the Unlock entity was cleared.
func (m *OtherRequirementMutation) OtherRequirementIDUnlockFkCleared() bool {
	return m.IDUnlockCleared() || m.clearedother_requirement_id_unlock_fk
}

// OtherRequirementIDUnlockFkID returns the "other_requirement_id_unlock_fk" edge ID in the mutation.
func (m *OtherRequirementMutation) OtherRequirementIDUnlockFkID() (id int, exists bool) {
	if m.other_requirement_id_unlock_fk != nil {
		return *m.other_requirement_id_unlock_fk, true
	}
	return
}

// OtherRequirementIDUnlockFkIDs returns the "other_requirement_id_unlock_fk" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OtherRequirementIDUnlockFkID instead. It exists only for internal usage by the builders.
func (m *OtherRequirementMutation) OtherRequirementIDUnlockFkIDs() (ids []int) {
	if id := m.other_requirement_id_unlock_fk; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOtherRequirementIDUnlockFk resets all changes to the "other_requirement_id_unlock_fk" edge.
func (m *OtherRequirementMutation) ResetOtherRequirementIDUnlockFk() {
	m.other_requirement_id_unlock_fk = nil
	m.clearedother_requirement_id_unlock_fk = false
}

// Where appends a list predicates to the OtherRequirementMutation builder.
func (m *OtherRequirementMutation) Where(ps ...predicate.OtherRequirement) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OtherRequirementMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OtherRequirementMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OtherRequirement, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OtherRequirementMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OtherRequirementMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OtherRequirement).
func (m *OtherRequirementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OtherRequirementMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, otherrequirement.FieldName)
	}
	if m.is_member != nil {
		fields = append(fields, otherrequirement.FieldIsMember)
	}
	if m.is_quest != nil {
		fields = append(fields, otherrequirement.FieldIsQuest)
	}
	if m.is_skill != nil {
		fields = append(fields, otherrequirement.FieldIsSkill)
	}
	if m.other_requirement_id_unlock_fk != nil {
		fields = append(fields, otherrequirement.FieldIDUnlock)
	}
	if m.id_of_requirement != nil {
		fields = append(fields, otherrequirement.FieldIDOfRequirement)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OtherRequirementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case otherrequirement.FieldName:
		return m.Name()
	case otherrequirement.FieldIsMember:
		return m.IsMember()
	case otherrequirement.FieldIsQuest:
		return m.IsQuest()
	case otherrequirement.FieldIsSkill:
		return m.IsSkill()
	case otherrequirement.FieldIDUnlock:
		return m.IDUnlock()
	case otherrequirement.FieldIDOfRequirement:
		return m.IDOfRequirement()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OtherRequirementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case otherrequirement.FieldName:
		return m.OldName(ctx)
	case otherrequirement.FieldIsMember:
		return m.OldIsMember(ctx)
	case otherrequirement.FieldIsQuest:
		return m.OldIsQuest(ctx)
	case otherrequirement.FieldIsSkill:
		return m.OldIsSkill(ctx)
	case otherrequirement.FieldIDUnlock:
		return m.OldIDUnlock(ctx)
	case otherrequirement.FieldIDOfRequirement:
		return m.OldIDOfRequirement(ctx)
	}
	return nil, fmt.Errorf("unknown OtherRequirement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OtherRequirementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case otherrequirement.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case otherrequirement.FieldIsMember:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMember(v)
		return nil
	case otherrequirement.FieldIsQuest:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsQuest(v)
		return nil
	case otherrequirement.FieldIsSkill:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSkill(v)
		return nil
	case otherrequirement.FieldIDUnlock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDUnlock(v)
		return nil
	case otherrequirement.FieldIDOfRequirement:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDOfRequirement(v)
		return nil
	}
	return fmt.Errorf("unknown OtherRequirement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OtherRequirementMutation) AddedFields() []string {
	var fields []string
	if m.addis_member != nil {
		fields = append(fields, otherrequirement.FieldIsMember)
	}
	if m.addis_quest != nil {
		fields = append(fields, otherrequirement.FieldIsQuest)
	}
	if m.addis_skill != nil {
		fields = append(fields, otherrequirement.FieldIsSkill)
	}
	if m.addid_of_requirement != nil {
		fields = append(fields, otherrequirement.FieldIDOfRequirement)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OtherRequirementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case otherrequirement.FieldIsMember:
		return m.AddedIsMember()
	case otherrequirement.FieldIsQuest:
		return m.AddedIsQuest()
	case otherrequirement.FieldIsSkill:
		return m.AddedIsSkill()
	case otherrequirement.FieldIDOfRequirement:
		return m.AddedIDOfRequirement()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OtherRequirementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case otherrequirement.FieldIsMember:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsMember(v)
		return nil
	case otherrequirement.FieldIsQuest:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsQuest(v)
		return nil
	case otherrequirement.FieldIsSkill:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsSkill(v)
		return nil
	case otherrequirement.FieldIDOfRequirement:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIDOfRequirement(v)
		return nil
	}
	return fmt.Errorf("unknown OtherRequirement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OtherRequirementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(otherrequirement.FieldIDUnlock) {
		fields = append(fields, otherrequirement.FieldIDUnlock)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OtherRequirementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OtherRequirementMutation) ClearField(name string) error {
	switch name {
	case otherrequirement.FieldIDUnlock:
		m.ClearIDUnlock()
		return nil
	}
	return fmt.Errorf("unknown OtherRequirement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OtherRequirementMutation) ResetField(name string) error {
	switch name {
	case otherrequirement.FieldName:
		m.ResetName()
		return nil
	case otherrequirement.FieldIsMember:
		m.ResetIsMember()
		return nil
	case otherrequirement.FieldIsQuest:
		m.ResetIsQuest()
		return nil
	case otherrequirement.FieldIsSkill:
		m.ResetIsSkill()
		return nil
	case otherrequirement.FieldIDUnlock:
		m.ResetIDUnlock()
		return nil
	case otherrequirement.FieldIDOfRequirement:
		m.ResetIDOfRequirement()
		return nil
	}
	return fmt.Errorf("unknown OtherRequirement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OtherRequirementMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.other_requirement_id_unlock_fk != nil {
		edges = append(edges, otherrequirement.EdgeOtherRequirementIDUnlockFk)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OtherRequirementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case otherrequirement.EdgeOtherRequirementIDUnlockFk:
		if id := m.other_requirement_id_unlock_fk; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OtherRequirementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OtherRequirementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OtherRequirementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedother_requirement_id_unlock_fk {
		edges = append(edges, otherrequirement.EdgeOtherRequirementIDUnlockFk)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OtherRequirementMutation) EdgeCleared(name string) bool {
	switch name {
	case otherrequirement.EdgeOtherRequirementIDUnlockFk:
		return m.clearedother_requirement_id_unlock_fk
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OtherRequirementMutation) ClearEdge(name string) error {
	switch name {
	case otherrequirement.EdgeOtherRequirementIDUnlockFk:
		m.ClearOtherRequirementIDUnlockFk()
		return nil
	}
	return fmt.Errorf("unknown OtherRequirement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OtherRequirementMutation) ResetEdge(name string) error {
	switch name {
	case otherrequirement.EdgeOtherRequirementIDUnlockFk:
		m.ResetOtherRequirementIDUnlockFk()
		return nil
	}
	return fmt.Errorf("unknown OtherRequirement edge %s", name)
}

// SkillMutation represents an operation that mutates the Skill nodes in the graph.
type SkillMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	description    *string
	is_member      *int
	addis_member   *int
	clearedFields  map[string]struct{}
	unlocks        map[int]struct{}
	removedunlocks map[int]struct{}
	clearedunlocks bool
	done           bool
	oldValue       func(context.Context) (*Skill, error)
	predicates     []predicate.Skill
}

var _ ent.Mutation = (*SkillMutation)(nil)

// skillOption allows management of the mutation configuration using functional options.
type skillOption func(*SkillMutation)

// newSkillMutation creates new mutation for the Skill entity.
func newSkillMutation(c config, op Op, opts ...skillOption) *SkillMutation {
	m := &SkillMutation{
		config:        c,
		op:            op,
		typ:           TypeSkill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkillID sets the ID field of the mutation.
func withSkillID(id int) skillOption {
	return func(m *SkillMutation) {
		var (
			err   error
			once  sync.Once
			value *Skill
		)
		m.oldValue = func(ctx context.Context) (*Skill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Skill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkill sets the old Skill of the mutation.
func withSkill(node *Skill) skillOption {
	return func(m *SkillMutation) {
		m.oldValue = func(context.Context) (*Skill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SkillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SkillMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Skill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SkillMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SkillMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SkillMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *SkillMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SkillMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *SkillMutation) ResetDescription() {
	m.description = nil
}

// SetIsMember sets the "is_member" field.
func (m *SkillMutation) SetIsMember(i int) {
	m.is_member = &i
	m.addis_member = nil
}

// IsMember returns the value of the "is_member" field in the mutation.
func (m *SkillMutation) IsMember() (r int, exists bool) {
	v := m.is_member
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMember returns the old "is_member" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldIsMember(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMember is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMember requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMember: %w", err)
	}
	return oldValue.IsMember, nil
}

// AddIsMember adds i to the "is_member" field.
func (m *SkillMutation) AddIsMember(i int) {
	if m.addis_member != nil {
		*m.addis_member += i
	} else {
		m.addis_member = &i
	}
}

// AddedIsMember returns the value that was added to the "is_member" field in this mutation.
func (m *SkillMutation) AddedIsMember() (r int, exists bool) {
	v := m.addis_member
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsMember resets all changes to the "is_member" field.
func (m *SkillMutation) ResetIsMember() {
	m.is_member = nil
	m.addis_member = nil
}

// AddUnlockIDs adds the "unlocks" edge to the Unlock entity by ids.
func (m *SkillMutation) AddUnlockIDs(ids ...int) {
	if m.unlocks == nil {
		m.unlocks = make(map[int]struct{})
	}
	for i := range ids {
		m.unlocks[ids[i]] = struct{}{}
	}
}

// ClearUnlocks clears the "unlocks" edge to the Unlock entity.
func (m *SkillMutation) ClearUnlocks() {
	m.clearedunlocks = true
}

// UnlocksCleared reports if the "unlocks" edge to the Unlock entity was cleared.
func (m *SkillMutation) UnlocksCleared() bool {
	return m.clearedunlocks
}

// RemoveUnlockIDs removes the "unlocks" edge to the Unlock entity by IDs.
func (m *SkillMutation) RemoveUnlockIDs(ids ...int) {
	if m.removedunlocks == nil {
		m.removedunlocks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.unlocks, ids[i])
		m.removedunlocks[ids[i]] = struct{}{}
	}
}

// RemovedUnlocks returns the removed IDs of the "unlocks" edge to the Unlock entity.
func (m *SkillMutation) RemovedUnlocksIDs() (ids []int) {
	for id := range m.removedunlocks {
		ids = append(ids, id)
	}
	return
}

// UnlocksIDs returns the "unlocks" edge IDs in the mutation.
func (m *SkillMutation) UnlocksIDs() (ids []int) {
	for id := range m.unlocks {
		ids = append(ids, id)
	}
	return
}

// ResetUnlocks resets all changes to the "unlocks" edge.
func (m *SkillMutation) ResetUnlocks() {
	m.unlocks = nil
	m.clearedunlocks = false
	m.removedunlocks = nil
}

// Where appends a list predicates to the SkillMutation builder.
func (m *SkillMutation) Where(ps ...predicate.Skill) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SkillMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SkillMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Skill, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SkillMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SkillMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Skill).
func (m *SkillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SkillMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, skill.FieldName)
	}
	if m.description != nil {
		fields = append(fields, skill.FieldDescription)
	}
	if m.is_member != nil {
		fields = append(fields, skill.FieldIsMember)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SkillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldName:
		return m.Name()
	case skill.FieldDescription:
		return m.Description()
	case skill.FieldIsMember:
		return m.IsMember()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SkillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skill.FieldName:
		return m.OldName(ctx)
	case skill.FieldDescription:
		return m.OldDescription(ctx)
	case skill.FieldIsMember:
		return m.OldIsMember(ctx)
	}
	return nil, fmt.Errorf("unknown Skill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skill.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case skill.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case skill.FieldIsMember:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMember(v)
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SkillMutation) AddedFields() []string {
	var fields []string
	if m.addis_member != nil {
		fields = append(fields, skill.FieldIsMember)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SkillMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldIsMember:
		return m.AddedIsMember()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) AddField(name string, value ent.Value) error {
	switch name {
	case skill.FieldIsMember:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsMember(v)
		return nil
	}
	return fmt.Errorf("unknown Skill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SkillMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SkillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkillMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Skill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SkillMutation) ResetField(name string) error {
	switch name {
	case skill.FieldName:
		m.ResetName()
		return nil
	case skill.FieldDescription:
		m.ResetDescription()
		return nil
	case skill.FieldIsMember:
		m.ResetIsMember()
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SkillMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.unlocks != nil {
		edges = append(edges, skill.EdgeUnlocks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SkillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeUnlocks:
		ids := make([]ent.Value, 0, len(m.unlocks))
		for id := range m.unlocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SkillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedunlocks != nil {
		edges = append(edges, skill.EdgeUnlocks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SkillMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeUnlocks:
		ids := make([]ent.Value, 0, len(m.removedunlocks))
		for id := range m.removedunlocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SkillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedunlocks {
		edges = append(edges, skill.EdgeUnlocks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SkillMutation) EdgeCleared(name string) bool {
	switch name {
	case skill.EdgeUnlocks:
		return m.clearedunlocks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SkillMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Skill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SkillMutation) ResetEdge(name string) error {
	switch name {
	case skill.EdgeUnlocks:
		m.ResetUnlocks()
		return nil
	}
	return fmt.Errorf("unknown Skill edge %s", name)
}

// UnlockMutation represents an operation that mutates the Unlock nodes in the graph.
type UnlockMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	name                      *string
	description               *string
	is_member                 *int
	addis_member              *int
	level                     *int
	addlevel                  *int
	clearedFields             map[string]struct{}
	unlock_id_skill_fk        *int
	clearedunlock_id_skill_fk bool
	other_requirements        map[int]struct{}
	removedother_requirements map[int]struct{}
	clearedother_requirements bool
	done                      bool
	oldValue                  func(context.Context) (*Unlock, error)
	predicates                []predicate.Unlock
}

var _ ent.Mutation = (*UnlockMutation)(nil)

// unlockOption allows management of the mutation configuration using functional options.
type unlockOption func(*UnlockMutation)

// newUnlockMutation creates new mutation for the Unlock entity.
func newUnlockMutation(c config, op Op, opts ...unlockOption) *UnlockMutation {
	m := &UnlockMutation{
		config:        c,
		op:            op,
		typ:           TypeUnlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUnlockID sets the ID field of the mutation.
func withUnlockID(id int) unlockOption {
	return func(m *UnlockMutation) {
		var (
			err   error
			once  sync.Once
			value *Unlock
		)
		m.oldValue = func(ctx context.Context) (*Unlock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Unlock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUnlock sets the old Unlock of the mutation.
func withUnlock(node *Unlock) unlockOption {
	return func(m *UnlockMutation) {
		m.oldValue = func(context.Context) (*Unlock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UnlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UnlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UnlockMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UnlockMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Unlock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIDSkill sets the "id_skill" field.
func (m *UnlockMutation) SetIDSkill(i int) {
	m.unlock_id_skill_fk = &i
}

// IDSkill returns the value of the "id_skill" field in the mutation.
func (m *UnlockMutation) IDSkill() (r int, exists bool) {
	v := m.unlock_id_skill_fk
	if v == nil {
		return
	}
	return *v, true
}

// OldIDSkill returns the old "id_skill" field's value of the Unlock entity.
// If the Unlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnlockMutation) OldIDSkill(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDSkill is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDSkill requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDSkill: %w", err)
	}
	return oldValue.IDSkill, nil
}

// ClearIDSkill clears the value of the "id_skill" field.
func (m *UnlockMutation) ClearIDSkill() {
	m.unlock_id_skill_fk = nil
	m.clearedFields[unlock.FieldIDSkill] = struct{}{}
}

// IDSkillCleared returns if the "id_skill" field was cleared in this mutation.
func (m *UnlockMutation) IDSkillCleared() bool {
	_, ok := m.clearedFields[unlock.FieldIDSkill]
	return ok
}

// ResetIDSkill resets all changes to the "id_skill" field.
func (m *UnlockMutation) ResetIDSkill() {
	m.unlock_id_skill_fk = nil
	delete(m.clearedFields, unlock.FieldIDSkill)
}

// SetName sets the "name" field.
func (m *UnlockMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UnlockMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Unlock entity.
// If the Unlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnlockMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UnlockMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *UnlockMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UnlockMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Unlock entity.
// If the Unlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnlockMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *UnlockMutation) ResetDescription() {
	m.description = nil
}

// SetIsMember sets the "is_member" field.
func (m *UnlockMutation) SetIsMember(i int) {
	m.is_member = &i
	m.addis_member = nil
}

// IsMember returns the value of the "is_member" field in the mutation.
func (m *UnlockMutation) IsMember() (r int, exists bool) {
	v := m.is_member
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMember returns the old "is_member" field's value of the Unlock entity.
// If the Unlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnlockMutation) OldIsMember(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMember is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMember requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMember: %w", err)
	}
	return oldValue.IsMember, nil
}

// AddIsMember adds i to the "is_member" field.
func (m *UnlockMutation) AddIsMember(i int) {
	if m.addis_member != nil {
		*m.addis_member += i
	} else {
		m.addis_member = &i
	}
}

// AddedIsMember returns the value that was added to the "is_member" field in this mutation.
func (m *UnlockMutation) AddedIsMember() (r int, exists bool) {
	v := m.addis_member
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsMember resets all changes to the "is_member" field.
func (m *UnlockMutation) ResetIsMember() {
	m.is_member = nil
	m.addis_member = nil
}

// SetLevel sets the "level" field.
func (m *UnlockMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *UnlockMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Unlock entity.
// If the Unlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnlockMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *UnlockMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *UnlockMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *UnlockMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetUnlockIDSkillFkID sets the "unlock_id_skill_fk" edge to the Skill entity by id.
func (m *UnlockMutation) SetUnlockIDSkillFkID(id int) {
	m.unlock_id_skill_fk = &id
}

// ClearUnlockIDSkillFk clears the "unlock_id_skill_fk" edge to the Skill entity.
func (m *UnlockMutation) ClearUnlockIDSkillFk() {
	m.clearedunlock_id_skill_fk = true
	m.clearedFields[unlock.FieldIDSkill] = struct{}{}
}

// UnlockIDSkillFkCleared reports if the "unlock_id_skill_fk" edge to the Skill entity was cleared.
func (m *UnlockMutation) UnlockIDSkillFkCleared() bool {
	return m.IDSkillCleared() || m.clearedunlock_id_skill_fk
}

// UnlockIDSkillFkID returns the "unlock_id_skill_fk" edge ID in the mutation.
func (m *UnlockMutation) UnlockIDSkillFkID() (id int, exists bool) {
	if m.unlock_id_skill_fk != nil {
		return *m.unlock_id_skill_fk, true
	}
	return
}

// UnlockIDSkillFkIDs returns the "unlock_id_skill_fk" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UnlockIDSkillFkID instead. It exists only for internal usage by the builders.
func (m *UnlockMutation) UnlockIDSkillFkIDs() (ids []int) {
	if id := m.unlock_id_skill_fk; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUnlockIDSkillFk resets all changes to the "unlock_id_skill_fk" edge.
func (m *UnlockMutation) ResetUnlockIDSkillFk() {
	m.unlock_id_skill_fk = nil
	m.clearedunlock_id_skill_fk = false
}

// AddOtherRequirementIDs adds the "other_requirements" edge to the OtherRequirement entity by ids.
func (m *UnlockMutation) AddOtherRequirementIDs(ids ...int) {
	if m.other_requirements == nil {
		m.other_requirements = make(map[int]struct{})
	}
	for i := range ids {
		m.other_requirements[ids[i]] = struct{}{}
	}
}

// ClearOtherRequirements clears the "other_requirements" edge to the OtherRequirement entity.
func (m *UnlockMutation) ClearOtherRequirements() {
	m.clearedother_requirements = true
}

// OtherRequirementsCleared reports if the "other_requirements" edge to the OtherRequirement entity was cleared.
func (m *UnlockMutation) OtherRequirementsCleared() bool {
	return m.clearedother_requirements
}

// RemoveOtherRequirementIDs removes the "other_requirements" edge to the OtherRequirement entity by IDs.
func (m *UnlockMutation) RemoveOtherRequirementIDs(ids ...int) {
	if m.removedother_requirements == nil {
		m.removedother_requirements = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.other_requirements, ids[i])
		m.removedother_requirements[ids[i]] = struct{}{}
	}
}

// RemovedOtherRequirements returns the removed IDs of the "other_requirements" edge to the OtherRequirement entity.
func (m *UnlockMutation) RemovedOtherRequirementsIDs() (ids []int) {
	for id := range m.removedother_requirements {
		ids = append(ids, id)
	}
	return
}

// OtherRequirementsIDs returns the "other_requirements" edge IDs in the mutation.
func (m *UnlockMutation) OtherRequirementsIDs() (ids []int) {
	for id := range m.other_requirements {
		ids = append(ids, id)
	}
	return
}

// ResetOtherRequirements resets all changes to the "other_requirements" edge.
func (m *UnlockMutation) ResetOtherRequirements() {
	m.other_requirements = nil
	m.clearedother_requirements = false
	m.removedother_requirements = nil
}

// Where appends a list predicates to the UnlockMutation builder.
func (m *UnlockMutation) Where(ps ...predicate.Unlock) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UnlockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UnlockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Unlock, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UnlockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UnlockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Unlock).
func (m *UnlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UnlockMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.unlock_id_skill_fk != nil {
		fields = append(fields, unlock.FieldIDSkill)
	}
	if m.name != nil {
		fields = append(fields, unlock.FieldName)
	}
	if m.description != nil {
		fields = append(fields, unlock.FieldDescription)
	}
	if m.is_member != nil {
		fields = append(fields, unlock.FieldIsMember)
	}
	if m.level != nil {
		fields = append(fields, unlock.FieldLevel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UnlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case unlock.FieldIDSkill:
		return m.IDSkill()
	case unlock.FieldName:
		return m.Name()
	case unlock.FieldDescription:
		return m.Description()
	case unlock.FieldIsMember:
		return m.IsMember()
	case unlock.FieldLevel:
		return m.Level()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UnlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case unlock.FieldIDSkill:
		return m.OldIDSkill(ctx)
	case unlock.FieldName:
		return m.OldName(ctx)
	case unlock.FieldDescription:
		return m.OldDescription(ctx)
	case unlock.FieldIsMember:
		return m.OldIsMember(ctx)
	case unlock.FieldLevel:
		return m.OldLevel(ctx)
	}
	return nil, fmt.Errorf("unknown Unlock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UnlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case unlock.FieldIDSkill:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDSkill(v)
		return nil
	case unlock.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case unlock.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case unlock.FieldIsMember:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMember(v)
		return nil
	case unlock.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	}
	return fmt.Errorf("unknown Unlock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UnlockMutation) AddedFields() []string {
	var fields []string
	if m.addis_member != nil {
		fields = append(fields, unlock.FieldIsMember)
	}
	if m.addlevel != nil {
		fields = append(fields, unlock.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UnlockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case unlock.FieldIsMember:
		return m.AddedIsMember()
	case unlock.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UnlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case unlock.FieldIsMember:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsMember(v)
		return nil
	case unlock.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown Unlock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UnlockMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(unlock.FieldIDSkill) {
		fields = append(fields, unlock.FieldIDSkill)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UnlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UnlockMutation) ClearField(name string) error {
	switch name {
	case unlock.FieldIDSkill:
		m.ClearIDSkill()
		return nil
	}
	return fmt.Errorf("unknown Unlock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UnlockMutation) ResetField(name string) error {
	switch name {
	case unlock.FieldIDSkill:
		m.ResetIDSkill()
		return nil
	case unlock.FieldName:
		m.ResetName()
		return nil
	case unlock.FieldDescription:
		m.ResetDescription()
		return nil
	case unlock.FieldIsMember:
		m.ResetIsMember()
		return nil
	case unlock.FieldLevel:
		m.ResetLevel()
		return nil
	}
	return fmt.Errorf("unknown Unlock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UnlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.unlock_id_skill_fk != nil {
		edges = append(edges, unlock.EdgeUnlockIDSkillFk)
	}
	if m.other_requirements != nil {
		edges = append(edges, unlock.EdgeOtherRequirements)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UnlockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case unlock.EdgeUnlockIDSkillFk:
		if id := m.unlock_id_skill_fk; id != nil {
			return []ent.Value{*id}
		}
	case unlock.EdgeOtherRequirements:
		ids := make([]ent.Value, 0, len(m.other_requirements))
		for id := range m.other_requirements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UnlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedother_requirements != nil {
		edges = append(edges, unlock.EdgeOtherRequirements)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UnlockMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case unlock.EdgeOtherRequirements:
		ids := make([]ent.Value, 0, len(m.removedother_requirements))
		for id := range m.removedother_requirements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UnlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedunlock_id_skill_fk {
		edges = append(edges, unlock.EdgeUnlockIDSkillFk)
	}
	if m.clearedother_requirements {
		edges = append(edges, unlock.EdgeOtherRequirements)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UnlockMutation) EdgeCleared(name string) bool {
	switch name {
	case unlock.EdgeUnlockIDSkillFk:
		return m.clearedunlock_id_skill_fk
	case unlock.EdgeOtherRequirements:
		return m.clearedother_requirements
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UnlockMutation) ClearEdge(name string) error {
	switch name {
	case unlock.EdgeUnlockIDSkillFk:
		m.ClearUnlockIDSkillFk()
		return nil
	}
	return fmt.Errorf("unknown Unlock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UnlockMutation) ResetEdge(name string) error {
	switch name {
	case unlock.EdgeUnlockIDSkillFk:
		m.ResetUnlockIDSkillFk()
		return nil
	case unlock.EdgeOtherRequirements:
		m.ResetOtherRequirements()
		return nil
	}
	return fmt.Errorf("unknown Unlock edge %s", name)
}
