// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"runescape_http_server/ent/predicate"
	"runescape_http_server/ent/skill"
	"runescape_http_server/ent/unlock"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkillUpdate is the builder for updating Skill entities.
type SkillUpdate struct {
	config
	hooks    []Hook
	mutation *SkillMutation
}

// Where appends a list predicates to the SkillUpdate builder.
func (su *SkillUpdate) Where(ps ...predicate.Skill) *SkillUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SkillUpdate) SetName(s string) *SkillUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SkillUpdate) SetNillableName(s *string) *SkillUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SkillUpdate) SetDescription(s string) *SkillUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SkillUpdate) SetNillableDescription(s *string) *SkillUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetIsMember sets the "is_member" field.
func (su *SkillUpdate) SetIsMember(i int) *SkillUpdate {
	su.mutation.ResetIsMember()
	su.mutation.SetIsMember(i)
	return su
}

// SetNillableIsMember sets the "is_member" field if the given value is not nil.
func (su *SkillUpdate) SetNillableIsMember(i *int) *SkillUpdate {
	if i != nil {
		su.SetIsMember(*i)
	}
	return su
}

// AddIsMember adds i to the "is_member" field.
func (su *SkillUpdate) AddIsMember(i int) *SkillUpdate {
	su.mutation.AddIsMember(i)
	return su
}

// AddUnlockIDs adds the "unlocks" edge to the Unlock entity by IDs.
func (su *SkillUpdate) AddUnlockIDs(ids ...int) *SkillUpdate {
	su.mutation.AddUnlockIDs(ids...)
	return su
}

// AddUnlocks adds the "unlocks" edges to the Unlock entity.
func (su *SkillUpdate) AddUnlocks(u ...*Unlock) *SkillUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUnlockIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (su *SkillUpdate) Mutation() *SkillMutation {
	return su.mutation
}

// ClearUnlocks clears all "unlocks" edges to the Unlock entity.
func (su *SkillUpdate) ClearUnlocks() *SkillUpdate {
	su.mutation.ClearUnlocks()
	return su
}

// RemoveUnlockIDs removes the "unlocks" edge to Unlock entities by IDs.
func (su *SkillUpdate) RemoveUnlockIDs(ids ...int) *SkillUpdate {
	su.mutation.RemoveUnlockIDs(ids...)
	return su
}

// RemoveUnlocks removes "unlocks" edges to Unlock entities.
func (su *SkillUpdate) RemoveUnlocks(u ...*Unlock) *SkillUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUnlockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SkillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SkillUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SkillUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SkillUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(skill.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.IsMember(); ok {
		_spec.SetField(skill.FieldIsMember, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedIsMember(); ok {
		_spec.AddField(skill.FieldIsMember, field.TypeInt, value)
	}
	if su.mutation.UnlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.UnlocksTable,
			Columns: []string{skill.UnlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedUnlocksIDs(); len(nodes) > 0 && !su.mutation.UnlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.UnlocksTable,
			Columns: []string{skill.UnlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UnlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.UnlocksTable,
			Columns: []string{skill.UnlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SkillUpdateOne is the builder for updating a single Skill entity.
type SkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkillMutation
}

// SetName sets the "name" field.
func (suo *SkillUpdateOne) SetName(s string) *SkillUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableName(s *string) *SkillUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SkillUpdateOne) SetDescription(s string) *SkillUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableDescription(s *string) *SkillUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetIsMember sets the "is_member" field.
func (suo *SkillUpdateOne) SetIsMember(i int) *SkillUpdateOne {
	suo.mutation.ResetIsMember()
	suo.mutation.SetIsMember(i)
	return suo
}

// SetNillableIsMember sets the "is_member" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableIsMember(i *int) *SkillUpdateOne {
	if i != nil {
		suo.SetIsMember(*i)
	}
	return suo
}

// AddIsMember adds i to the "is_member" field.
func (suo *SkillUpdateOne) AddIsMember(i int) *SkillUpdateOne {
	suo.mutation.AddIsMember(i)
	return suo
}

// AddUnlockIDs adds the "unlocks" edge to the Unlock entity by IDs.
func (suo *SkillUpdateOne) AddUnlockIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.AddUnlockIDs(ids...)
	return suo
}

// AddUnlocks adds the "unlocks" edges to the Unlock entity.
func (suo *SkillUpdateOne) AddUnlocks(u ...*Unlock) *SkillUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUnlockIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (suo *SkillUpdateOne) Mutation() *SkillMutation {
	return suo.mutation
}

// ClearUnlocks clears all "unlocks" edges to the Unlock entity.
func (suo *SkillUpdateOne) ClearUnlocks() *SkillUpdateOne {
	suo.mutation.ClearUnlocks()
	return suo
}

// RemoveUnlockIDs removes the "unlocks" edge to Unlock entities by IDs.
func (suo *SkillUpdateOne) RemoveUnlockIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.RemoveUnlockIDs(ids...)
	return suo
}

// RemoveUnlocks removes "unlocks" edges to Unlock entities.
func (suo *SkillUpdateOne) RemoveUnlocks(u ...*Unlock) *SkillUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUnlockIDs(ids...)
}

// Where appends a list predicates to the SkillUpdate builder.
func (suo *SkillUpdateOne) Where(ps ...predicate.Skill) *SkillUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SkillUpdateOne) Select(field string, fields ...string) *SkillUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Skill entity.
func (suo *SkillUpdateOne) Save(ctx context.Context) (*Skill, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SkillUpdateOne) SaveX(ctx context.Context) *Skill {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SkillUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SkillUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SkillUpdateOne) sqlSave(ctx context.Context) (_node *Skill, err error) {
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Skill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skill.FieldID)
		for _, f := range fields {
			if !skill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != skill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(skill.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.IsMember(); ok {
		_spec.SetField(skill.FieldIsMember, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedIsMember(); ok {
		_spec.AddField(skill.FieldIsMember, field.TypeInt, value)
	}
	if suo.mutation.UnlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.UnlocksTable,
			Columns: []string{skill.UnlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedUnlocksIDs(); len(nodes) > 0 && !suo.mutation.UnlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.UnlocksTable,
			Columns: []string{skill.UnlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UnlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.UnlocksTable,
			Columns: []string{skill.UnlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(unlock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Skill{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
