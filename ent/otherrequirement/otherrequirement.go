// Code generated by ent, DO NOT EDIT.

package otherrequirement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the otherrequirement type in the database.
	Label = "other_requirement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIsMember holds the string denoting the is_member field in the database.
	FieldIsMember = "is_member"
	// FieldIsQuest holds the string denoting the is_quest field in the database.
	FieldIsQuest = "is_quest"
	// FieldIsSkill holds the string denoting the is_skill field in the database.
	FieldIsSkill = "is_skill"
	// FieldIDUnlock holds the string denoting the id_unlock field in the database.
	FieldIDUnlock = "id_unlock"
	// FieldIDOfRequirement holds the string denoting the id_of_requirement field in the database.
	FieldIDOfRequirement = "id_of_requirement"
	// EdgeOtherRequirementIDUnlockFk holds the string denoting the other_requirement_id_unlock_fk edge name in mutations.
	EdgeOtherRequirementIDUnlockFk = "other_requirement_id_unlock_fk"
	// Table holds the table name of the otherrequirement in the database.
	Table = "other_requirements"
	// OtherRequirementIDUnlockFkTable is the table that holds the other_requirement_id_unlock_fk relation/edge.
	OtherRequirementIDUnlockFkTable = "other_requirements"
	// OtherRequirementIDUnlockFkInverseTable is the table name for the Unlock entity.
	// It exists in this package in order to avoid circular dependency with the "unlock" package.
	OtherRequirementIDUnlockFkInverseTable = "unlocks"
	// OtherRequirementIDUnlockFkColumn is the table column denoting the other_requirement_id_unlock_fk relation/edge.
	OtherRequirementIDUnlockFkColumn = "id_unlock"
)

// Columns holds all SQL columns for otherrequirement fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIsMember,
	FieldIsQuest,
	FieldIsSkill,
	FieldIDUnlock,
	FieldIDOfRequirement,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OtherRequirement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIsMember orders the results by the is_member field.
func ByIsMember(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMember, opts...).ToFunc()
}

// ByIsQuest orders the results by the is_quest field.
func ByIsQuest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsQuest, opts...).ToFunc()
}

// ByIsSkill orders the results by the is_skill field.
func ByIsSkill(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSkill, opts...).ToFunc()
}

// ByIDUnlock orders the results by the id_unlock field.
func ByIDUnlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDUnlock, opts...).ToFunc()
}

// ByIDOfRequirement orders the results by the id_of_requirement field.
func ByIDOfRequirement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDOfRequirement, opts...).ToFunc()
}

// ByOtherRequirementIDUnlockFkField orders the results by other_requirement_id_unlock_fk field.
func ByOtherRequirementIDUnlockFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOtherRequirementIDUnlockFkStep(), sql.OrderByField(field, opts...))
	}
}
func newOtherRequirementIDUnlockFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OtherRequirementIDUnlockFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OtherRequirementIDUnlockFkTable, OtherRequirementIDUnlockFkColumn),
	)
}
