// Code generated by ent, DO NOT EDIT.

package otherrequirement

import (
	"runescape_http_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldName, v))
}

// IsMember applies equality check predicate on the "is_member" field. It's identical to IsMemberEQ.
func IsMember(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIsMember, v))
}

// IsQuest applies equality check predicate on the "is_quest" field. It's identical to IsQuestEQ.
func IsQuest(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIsQuest, v))
}

// IsSkill applies equality check predicate on the "is_skill" field. It's identical to IsSkillEQ.
func IsSkill(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIsSkill, v))
}

// IDUnlock applies equality check predicate on the "id_unlock" field. It's identical to IDUnlockEQ.
func IDUnlock(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIDUnlock, v))
}

// IDOfRequirement applies equality check predicate on the "id_of_requirement" field. It's identical to IDOfRequirementEQ.
func IDOfRequirement(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIDOfRequirement, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldContainsFold(FieldName, v))
}

// IsMemberEQ applies the EQ predicate on the "is_member" field.
func IsMemberEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIsMember, v))
}

// IsMemberNEQ applies the NEQ predicate on the "is_member" field.
func IsMemberNEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNEQ(FieldIsMember, v))
}

// IsMemberIn applies the In predicate on the "is_member" field.
func IsMemberIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIn(FieldIsMember, vs...))
}

// IsMemberNotIn applies the NotIn predicate on the "is_member" field.
func IsMemberNotIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotIn(FieldIsMember, vs...))
}

// IsMemberGT applies the GT predicate on the "is_member" field.
func IsMemberGT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGT(FieldIsMember, v))
}

// IsMemberGTE applies the GTE predicate on the "is_member" field.
func IsMemberGTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGTE(FieldIsMember, v))
}

// IsMemberLT applies the LT predicate on the "is_member" field.
func IsMemberLT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLT(FieldIsMember, v))
}

// IsMemberLTE applies the LTE predicate on the "is_member" field.
func IsMemberLTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLTE(FieldIsMember, v))
}

// IsQuestEQ applies the EQ predicate on the "is_quest" field.
func IsQuestEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIsQuest, v))
}

// IsQuestNEQ applies the NEQ predicate on the "is_quest" field.
func IsQuestNEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNEQ(FieldIsQuest, v))
}

// IsQuestIn applies the In predicate on the "is_quest" field.
func IsQuestIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIn(FieldIsQuest, vs...))
}

// IsQuestNotIn applies the NotIn predicate on the "is_quest" field.
func IsQuestNotIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotIn(FieldIsQuest, vs...))
}

// IsQuestGT applies the GT predicate on the "is_quest" field.
func IsQuestGT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGT(FieldIsQuest, v))
}

// IsQuestGTE applies the GTE predicate on the "is_quest" field.
func IsQuestGTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGTE(FieldIsQuest, v))
}

// IsQuestLT applies the LT predicate on the "is_quest" field.
func IsQuestLT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLT(FieldIsQuest, v))
}

// IsQuestLTE applies the LTE predicate on the "is_quest" field.
func IsQuestLTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLTE(FieldIsQuest, v))
}

// IsSkillEQ applies the EQ predicate on the "is_skill" field.
func IsSkillEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIsSkill, v))
}

// IsSkillNEQ applies the NEQ predicate on the "is_skill" field.
func IsSkillNEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNEQ(FieldIsSkill, v))
}

// IsSkillIn applies the In predicate on the "is_skill" field.
func IsSkillIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIn(FieldIsSkill, vs...))
}

// IsSkillNotIn applies the NotIn predicate on the "is_skill" field.
func IsSkillNotIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotIn(FieldIsSkill, vs...))
}

// IsSkillGT applies the GT predicate on the "is_skill" field.
func IsSkillGT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGT(FieldIsSkill, v))
}

// IsSkillGTE applies the GTE predicate on the "is_skill" field.
func IsSkillGTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGTE(FieldIsSkill, v))
}

// IsSkillLT applies the LT predicate on the "is_skill" field.
func IsSkillLT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLT(FieldIsSkill, v))
}

// IsSkillLTE applies the LTE predicate on the "is_skill" field.
func IsSkillLTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLTE(FieldIsSkill, v))
}

// IDUnlockEQ applies the EQ predicate on the "id_unlock" field.
func IDUnlockEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIDUnlock, v))
}

// IDUnlockNEQ applies the NEQ predicate on the "id_unlock" field.
func IDUnlockNEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNEQ(FieldIDUnlock, v))
}

// IDUnlockIn applies the In predicate on the "id_unlock" field.
func IDUnlockIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIn(FieldIDUnlock, vs...))
}

// IDUnlockNotIn applies the NotIn predicate on the "id_unlock" field.
func IDUnlockNotIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotIn(FieldIDUnlock, vs...))
}

// IDUnlockIsNil applies the IsNil predicate on the "id_unlock" field.
func IDUnlockIsNil() predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIsNull(FieldIDUnlock))
}

// IDUnlockNotNil applies the NotNil predicate on the "id_unlock" field.
func IDUnlockNotNil() predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotNull(FieldIDUnlock))
}

// IDOfRequirementEQ applies the EQ predicate on the "id_of_requirement" field.
func IDOfRequirementEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldEQ(FieldIDOfRequirement, v))
}

// IDOfRequirementNEQ applies the NEQ predicate on the "id_of_requirement" field.
func IDOfRequirementNEQ(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNEQ(FieldIDOfRequirement, v))
}

// IDOfRequirementIn applies the In predicate on the "id_of_requirement" field.
func IDOfRequirementIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldIn(FieldIDOfRequirement, vs...))
}

// IDOfRequirementNotIn applies the NotIn predicate on the "id_of_requirement" field.
func IDOfRequirementNotIn(vs ...int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldNotIn(FieldIDOfRequirement, vs...))
}

// IDOfRequirementGT applies the GT predicate on the "id_of_requirement" field.
func IDOfRequirementGT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGT(FieldIDOfRequirement, v))
}

// IDOfRequirementGTE applies the GTE predicate on the "id_of_requirement" field.
func IDOfRequirementGTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldGTE(FieldIDOfRequirement, v))
}

// IDOfRequirementLT applies the LT predicate on the "id_of_requirement" field.
func IDOfRequirementLT(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLT(FieldIDOfRequirement, v))
}

// IDOfRequirementLTE applies the LTE predicate on the "id_of_requirement" field.
func IDOfRequirementLTE(v int) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.FieldLTE(FieldIDOfRequirement, v))
}

// HasOtherRequirementIDUnlockFk applies the HasEdge predicate on the "other_requirement_id_unlock_fk" edge.
func HasOtherRequirementIDUnlockFk() predicate.OtherRequirement {
	return predicate.OtherRequirement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OtherRequirementIDUnlockFkTable, OtherRequirementIDUnlockFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOtherRequirementIDUnlockFkWith applies the HasEdge predicate on the "other_requirement_id_unlock_fk" edge with a given conditions (other predicates).
func HasOtherRequirementIDUnlockFkWith(preds ...predicate.Unlock) predicate.OtherRequirement {
	return predicate.OtherRequirement(func(s *sql.Selector) {
		step := newOtherRequirementIDUnlockFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OtherRequirement) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OtherRequirement) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OtherRequirement) predicate.OtherRequirement {
	return predicate.OtherRequirement(sql.NotPredicates(p))
}
