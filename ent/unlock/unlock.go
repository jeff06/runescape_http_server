// Code generated by ent, DO NOT EDIT.

package unlock

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the unlock type in the database.
	Label = "unlock"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIDSkill holds the string denoting the id_skill field in the database.
	FieldIDSkill = "id_skill"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsMember holds the string denoting the is_member field in the database.
	FieldIsMember = "is_member"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// EdgeUnlockIDSkillFk holds the string denoting the unlock_id_skill_fk edge name in mutations.
	EdgeUnlockIDSkillFk = "unlock_id_skill_fk"
	// EdgeOtherRequirements holds the string denoting the other_requirements edge name in mutations.
	EdgeOtherRequirements = "other_requirements"
	// Table holds the table name of the unlock in the database.
	Table = "unlocks"
	// UnlockIDSkillFkTable is the table that holds the unlock_id_skill_fk relation/edge.
	UnlockIDSkillFkTable = "unlocks"
	// UnlockIDSkillFkInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	UnlockIDSkillFkInverseTable = "skills"
	// UnlockIDSkillFkColumn is the table column denoting the unlock_id_skill_fk relation/edge.
	UnlockIDSkillFkColumn = "id_skill"
	// OtherRequirementsTable is the table that holds the other_requirements relation/edge.
	OtherRequirementsTable = "other_requirements"
	// OtherRequirementsInverseTable is the table name for the OtherRequirement entity.
	// It exists in this package in order to avoid circular dependency with the "otherrequirement" package.
	OtherRequirementsInverseTable = "other_requirements"
	// OtherRequirementsColumn is the table column denoting the other_requirements relation/edge.
	OtherRequirementsColumn = "id_unlock"
)

// Columns holds all SQL columns for unlock fields.
var Columns = []string{
	FieldID,
	FieldIDSkill,
	FieldName,
	FieldDescription,
	FieldIsMember,
	FieldLevel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Unlock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIDSkill orders the results by the id_skill field.
func ByIDSkill(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDSkill, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsMember orders the results by the is_member field.
func ByIsMember(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMember, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByUnlockIDSkillFkField orders the results by unlock_id_skill_fk field.
func ByUnlockIDSkillFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUnlockIDSkillFkStep(), sql.OrderByField(field, opts...))
	}
}

// ByOtherRequirementsCount orders the results by other_requirements count.
func ByOtherRequirementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOtherRequirementsStep(), opts...)
	}
}

// ByOtherRequirements orders the results by other_requirements terms.
func ByOtherRequirements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOtherRequirementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUnlockIDSkillFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UnlockIDSkillFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UnlockIDSkillFkTable, UnlockIDSkillFkColumn),
	)
}
func newOtherRequirementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OtherRequirementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OtherRequirementsTable, OtherRequirementsColumn),
	)
}
